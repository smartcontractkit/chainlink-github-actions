name: Build Image For Testing
description: Common docker image builder for building chainlink test images
inputs:
  cl_repo:
    required: true
    description: The chainlink repository to use
    default: ${{ github.repository }}
  cl_ref:
    required: false
    description: The git ref from the chainlink repository to use
    default: develop
  cl_dockerfile:
    required: false
    description: The chainlink dockerfile to use to build the image with
    default: core/chainlink.Dockerfile
  push_tag:
    required: true
    description: The full docker tag to use for the push to ecr, does not push anything if tag is empty
  dep_solana_sha:
    required: false
    description: chainlink-solana commit or branch
  dep_cosmos_sha:
    required: false
    description: chainlink-cosmos commit or branch
  dep_starknet_sha:
    required: false
    description: chainlink-starknet commit or branch
  dep_atlas_sha:
    required: false
    description: atlas commit or branch
  dep_common_sha:
    required: false
    description: chainlink-common commit or branch
  QA_AWS_REGION:
    required: true
    description: The AWS region to use
  QA_AWS_ROLE_TO_ASSUME:
    required: true
    description: The AWS role to assume
  QA_PRIVATE_GHA_PULL:
    required: false
    description: Token to pull private repos
  GOPRIVATE:
    required: false
    description: private repos needed for go
  should_checkout:
    required: false
    description: Do we want to checkout the chainlink code branch, sometimes we don't need to
  docker_secrets:
    description: Secrets to pass to the docker build and push action
    required: false

runs:
  using: composite
  steps:
    - name: Checkout Chainlink repo
      if: ${{ inputs.should_checkout == 'true' }}
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.cl_repo }}
        ref: ${{ inputs.cl_ref }}
    - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
      env:
        GOPRIVATE: ${{ inputs.GOPRIVATE }}
      with:
        go-version-file: "go.mod"
        check-latest: true
        cache: false
    - name: Replace GHA URL
      shell: bash
      env:
        GOPRIVATE: ${{ inputs.GOPRIVATE }}
        QA_PRIVATE_GHA_PULL: ${{ inputs.QA_PRIVATE_GHA_PULL }}
      run: git config --global url.https://${{ inputs.QA_PRIVATE_GHA_PULL }}@github.com/.insteadOf https://github.com/
    - name: Replace Solana deps
      if: ${{ inputs.dep_solana_sha }}
      shell: bash
      run: go get github.com/smartcontractkit/chainlink-solana@${{ inputs.dep_solana_sha }}
    - name: Replace Cosmos deps
      if: ${{ inputs.dep_cosmos_sha }}
      shell: bash
      run: go get github.com/smartcontractkit/chainlink-cosmos@${{ inputs.dep_cosmos_sha }}
    - name: Replace StarkNet deps
      if: ${{ inputs.dep_starknet_sha }}
      shell: bash
      run: go get github.com/smartcontractkit/chainlink-starknet/relayer@${{ inputs.dep_starknet_sha }}
    - name: Replace Atlas deps
      if: ${{ inputs.dep_atlas_sha }}
      shell: bash
      env:
        GOPRIVATE: ${{ inputs.GOPRIVATE }}
      run: go get github.com/smartcontractkit/atlas@${{ inputs.dep_atlas_sha }}
    - name: Replace chainlink-common deps
      if: ${{ inputs.dep_common_sha }}
      shell: bash
      run: GOPROXY=direct go get -x github.com/smartcontractkit/chainlink-common@v0.1.6
    - name: Tidy
      shell: bash
      env:
        GOPRIVATE: ${{ inputs.GOPRIVATE }}
      run: go mod tidy
    - name: Env vars
      shell: bash
      run: env
    - name: Cat go.mod
      shell: bash
      run: cat go.mod
    - name: Setup push_tag
      id: push
      shell: bash
      run: |
        if [ "${{ inputs.push_tag }}" != "" ]; then
          # tag exists so we can push
          echo "push=true" >>$GITHUB_OUTPUT
        else
          # tag is empty, don't push
          echo "push=false" >>$GITHUB_OUTPUT
        fi
    - name: Configure AWS Credentials
      if: steps.push.outputs.push == 'true'
      uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
      with:
        aws-region: ${{ inputs.QA_AWS_REGION }}
        role-to-assume: ${{ inputs.QA_AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: 3600
    - name: Login to Amazon ECR
      if: steps.push.outputs.push == 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
      with:
        mask-password: "true"
    - name: Set up Docker Buildx
      if: steps.push.outputs.push == 'true'
      uses: docker/setup-buildx-action@v2
    - name: Build and Push
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ${{ inputs.cl_dockerfile }}
        # comma separated like: KEY1=VAL1,KEY2=VAL2,...
        build-args: |
          COMMIT_SHA=${{ github.sha }}
          CHAINLINK_USER=chainlink
        tags: ${{ inputs.push_tag }}
        push: ${{ steps.push.outputs.push }}
        secrets: ${{ inputs.docker_secrets }}
