name: chainlink-testing-framework-test-runner
description: Common runner for chainlink-testing-framework based tests
inputs:
  artifacts_location:
    required: false
    description: Location of where error logs are written
    default: ./integration-tests/smoke/logs
  artifacts_name:
    required: false
    description: Name of the artifact to upload
    default: test-logs
  test_command_to_run:
    required: true
    description: The command to run the tests
  test_download_vendor_packages_command:
    required: false
    description: The command to download the go modules
    default: make download
  test_secrets_defaults_base64:
    required: false
    description: The base64-encoded .env file with key=value with secrets to use as defaults
  test_secrets_override_base64:
    required: false
    description: The base64-encoded .env file with key=value with secrets to override defaults
  test_config_override_path:
    required: false
    description: The path to the test config file used to override the default test config  
  test_config_override_base64:
    required: false
    description: The base64-encoded test config override
  test_type:
    required: false
    description: The type of test to run. Used by some tests to select test configuration  
  test_suite: 
    required: false
    description: The test suite to run. Used by k8s remote runner tests
  cl_repo:
    required: false
    description: The Chainlink ecr repository to use
    default: public.ecr.aws/z0b1w9r9/chainlink
  cl_image_tag:
    required: false
    description: The chainlink image to use
    default: develop
  build_gauntlet_command:
    required: false
    description: How to build gauntlet if necessary
    default: "false"
  download_contract_artifacts_path:
    required: false
    description: Path where the contract artifacts need to be placed
    default: "none"
  publish_report_paths:
    required: false
    description: The path of the output report
    default: "./tests-smoke-report.xml"
  publish_check_name:
    required: false
    description: The check name for publishing the reports
    default: Smoke Test Results
  token:
    required: false
    description: The GITHUB_TOKEN for the workflow
    default: ${{ github.token }}
  publish_test_results_comment_mode:
    required: false
    description: comment_mode value for EnricoMi/publish-unit-test-result-action@v1
    default: always
  publish_test_results_commit:
    required: false
    description: Commit SHA to which test results are published. Only needed if the value of GITHUB_SHA does not work for you.
  triggered_by:
    required: true
    description: The triggered-by label for the k8s namespace, required for cleanup
    default: ci
  go_version:
    required: false
    description: Go version to install
  go_mod_path:
    required: false
    description: The go.mod file path
  go_coverage_src_dir:
    required: false
    description: The source directory for go coverage files 
  go_coverage_dest_dir:
    required: false
    description: The destination directory to store go coverage files   
  cache_restore_only:
    required: false
    description: Only restore the cache, set to true if you want to restore and save on cache hit miss
    default: "false"
  cache_key_id:
    required: false
    description: Cache go vendors unique id
    default: go
  aws_registries:
    required: false
    description: AWS registries to log into for the test if needed
  aws_role_duration_seconds:
    required: false
    default: "3600"
    description: The duration to be logged into the aws role for
  dockerhub_username:
    description: Username for Docker Hub to avoid rate limits when pulling public images
    required: false
  dockerhub_password:
    description: Password for Docker Hub to avoid rate limits when pulling public images
    required: false
  dep_chainlink_integration_tests:
    required: false
    description: chainlink/integration-tests commit or branch
  QA_AWS_REGION:
    required: true
    description: The AWS region to use
  QA_AWS_ROLE_TO_ASSUME:
    required: true
    description: The AWS role to assume
  QA_KUBECONFIG:
    required: false
    description: The kubernetes configuration to use
  CGO_ENABLED:
    required: false
    description: Whether to have cgo enabled, defaults to enabled
    default: "1"
  run_setup:
    required: false
    description: Should we run the setup before running the tests
    default: "true"
  should_cleanup:
    required: false
    description: Whether to run the cleanup at the end, soak tests and such would not want to automatically cleanup
    default: "false"
  should_tidy:
    required: false
    description: Should we check go mod tidy
    default: "true"
  no_cache:
    required: false
    description: Do not use a go cache
    default: "false"
 
runs:
  using: composite
  steps:
    # Setup Tools and libraries
    - name: Setup environment
      if: inputs.run_setup == 'true'
      uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/setup-run-tests-environment@e4dd107855e2359e2d762a48872a3e9365e70f11 # v2.3.30
      with:
        test_download_vendor_packages_command: ${{ inputs.test_download_vendor_packages_command }}
        go_version: ${{ inputs.go_version }}
        go_mod_path: ${{ inputs.go_mod_path }}
        cache_restore_only: ${{ inputs.cache_restore_only }}
        cache_key_id: ${{ inputs.cache_key_id }}
        aws_registries: ${{ inputs.aws_registries }}
        aws_role_duration_seconds: ${{ inputs.aws_role_duration_seconds }}
        dockerhub_username: ${{ inputs.dockerhub_username }}
        dockerhub_password: ${{ inputs.dockerhub_password }}
        QA_AWS_REGION: ${{ inputs.QA_AWS_REGION }}
        QA_AWS_ROLE_TO_ASSUME: ${{ inputs.QA_AWS_ROLE_TO_ASSUME }}
        QA_KUBECONFIG: ${{ inputs.QA_KUBECONFIG }}
        should_tidy: ${{ inputs.should_tidy }}
        no_cache: ${{ inputs.no_cache }}

    - name: Replace chainlink/integration-tests deps
      if: ${{ inputs.dep_chainlink_integration_tests }}
      shell: bash
      run: |
        # find test go root by using the go_mod_path and change to that directory
        TEST_LIB_PATH="${{ inputs.go_mod_path }}"
        if [ "${#TEST_LIB_PATH}" -gt "6" ]; then
            TEST_LIB_PATH=${TEST_LIB_PATH%go.mod}
            cd "${TEST_LIB_PATH}"
        fi

        # update the integration-tests lib to the branch or commit
        go get github.com/smartcontractkit/chainlink/integration-tests@${{ inputs.dep_chainlink_integration_tests }}
        go mod tidy

    # Download any external artifacts
    - name: Download Artifacts
      if: inputs.download_contract_artifacts_path != 'none'
      uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
      with:
        name: artifacts
        path: ${{ inputs.download_contract_artifacts_path }}

    # Generate any excutables needed to run tests
    - name: Generate gauntlet executable
      if: inputs.build_gauntlet_command != 'false'
      shell: bash
      run: ${{ inputs.build_gauntlet_command }}

    # TODO: Remove this once gotestloghelper has replaced all usages of gotestfmt
    - name: Set Up gotestfmt
      uses: GoTestTools/gotestfmt-action@8b4478c7019be847373babde9300210e7de34bfb # v2.2.0
      with:
        token: ${{ inputs.token }} # Avoids rate-limiting

    # gotestfmt gives us pretty test output
    - name: Set Up gotestloghelper
      shell: bash
      run: go install github.com/smartcontractkit/chainlink-testing-framework/tools/gotestloghelper@v1.1.1

    - name: Set default enironment variables
      shell: bash
      run: |
        if [ -n "${{ inputs.test_type }}" ]; then
          echo "TEST_TYPE=${{ inputs.test_type }}" >> $GITHUB_ENV
          echo "TEST_TEST_TYPE=${{ inputs.test_type }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ inputs.test_suite }}" ]; then
          echo "TEST_SUITE=${{ inputs.test_suite }}" >> $GITHUB_ENV
          echo "TEST_TEST_SUITE=${{ inputs.test_suite }}" >> $GITHUB_ENV
        fi

    # If default and/or custom secrets provided, decode them, mask them and set them as env vars to override the default secrets
    - name: Set default test secrets from dotenv file
      if: inputs.test_secrets_defaults_base64 != ''
      shell: bash
      run: go run ${{ github.action_path }}/mask-testsecrets/main.go "${{ inputs.test_secrets_defaults_base64 }}"
    
    # Custom secrets override the default secrets
    - name: Set custom test secrets from dotenv file
      if: inputs.test_secrets_override_base64 != ''
      shell: bash
      run: go run ${{ github.action_path }}/mask-testsecrets/main.go "${{ inputs.test_secrets_override_base64 }}"

    - name: Display E2E_TEST_CHAINLINK_IMAGE
      shell: bash
      run: echo "E2E_TEST_CHAINLINK_IMAGE=${{ env.E2E_TEST_CHAINLINK_IMAGE }}"

    - name: Set test config override from config file
      if: inputs.test_config_override_path != ''
      shell: bash
      run: |
        BASE64_CONFIG_OVERRIDE=$(base64 -w 0 -i ${{ inputs.test_config_override_path }})
        echo ::add-mask::$BASE64_CONFIG_OVERRIDE
        echo "BASE64_CONFIG_OVERRIDE=$BASE64_CONFIG_OVERRIDE" >> $GITHUB_ENV 

    - name: Display E2E_TEST_CHAINLINK_IMAGE
      shell: bash
      run: echo "E2E_TEST_CHAINLINK_IMAGE=${{ env.E2E_TEST_CHAINLINK_IMAGE }}"        

    # Override the default test config if a custom one is provided
    - name: Use test config override
      if: inputs.test_config_override_base64 != ''
      shell: bash
      run: |
        BASE64_CONFIG_OVERRIDE=${{ inputs.test_config_override_base64 }}
        echo ::add-mask::$BASE64_CONFIG_OVERRIDE
        echo "BASE64_CONFIG_OVERRIDE=$BASE64_CONFIG_OVERRIDE" >> $GITHUB_ENV 

    - name: Display E2E_TEST_CHAINLINK_IMAGE
      shell: bash
      run: echo "E2E_TEST_CHAINLINK_IMAGE=${{ env.E2E_TEST_CHAINLINK_IMAGE }}"        

    # Run the tests
    - name: Run Tests
      shell: bash
      env:
        CHAINLINK_IMAGE: ${{ inputs.cl_repo }} # TODO: to remove
        CHAINLINK_VERSION: ${{ inputs.cl_image_tag }} # TODO: to remove
        CHAINLINK_ENV_USER: ${{ github.actor }}
        CGO_ENABLED: ${{ inputs.CGO_ENABLED }}
        GO_COVERAGE_SRC_DIR: ${{ inputs.go_coverage_src_dir }}
        GO_COVERAGE_DEST_DIR: ${{ inputs.go_coverage_dest_dir }}
      run: |
        PATH=$PATH:$(go env GOPATH)/bin
        export PATH
        export TEST_TRIGGERED_BY=${{ inputs.triggered_by }}-${{ github.event.pull_request.number || github.run_id }}
        # Handle bots as users
        export CHAINLINK_ENV_USER=${CHAINLINK_ENV_USER//"[bot]"/-bot}
        ${{ inputs.test_command_to_run }}

    - name: Publish Artifacts
      if: failure()
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
      with:
        name: ${{ inputs.artifacts_name }}
        path: ${{ inputs.artifacts_location }}

    - name: cleanup
      if: always()
      uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/cleanup@v2.3.6
      with:
        triggered_by: ${{ inputs.triggered_by }}
        should_cleanup: ${{ inputs.should_cleanup }}
