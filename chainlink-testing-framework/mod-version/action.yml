name: chainlink-testing-framework-mod-version
description: Does logic for a particular go module for its tag
inputs:
  go-project-path:
    required: true
    description: The path to the base of the go project where the go.mod file lives
  module-name:
    required: true
    description: The module name to get
  enforce-semantic-tag:
    required: false
    description: Should we enforce the version to be a semantic tag
    default: "false"
outputs:
  version:
    description: Did we clean up pods
    value: ${{ steps.version.outputs.version }}
  is_semantic:
    description: Is the version a proper semantic version
    value: ${{ steps.enforce.outputs.pass }}

runs:
  using: composite
  steps:
    - name: Get version
      id: version
      shell: bash
      env:
        go_project_path: ${{ inputs.go-project-path }}
        package_name: ${{ inputs.module-name }}
      run: |
        cd ${go_project_path}
        # Extract the version of the package from go.mod
        version=$(grep "^$package_name " go.mod | awk '{print $2}')
        echo "Found version: $version"
        # Check if version is empty
        if [ -z "$version" ]; then
            echo "There is no version for $package_name"
            exit 1  # Exit with a failure code
        else
            echo "Found version: $version"
        fi
        echo "version=${version}" >>$GITHUB_OUTPUT
    - name: Enforce Semantic version
      id: enforce
      shell: bash
      env:
        version: ${{ steps.version.outputs.version }}
        enforce: ${{ inputs.enforce-semantic-tag }}
      run: |
        if [[ $version =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "The version $version is a semantic version."
            echo "pass=true" >>$GITHUB_OUTPUT
        else
            echo "pass=false" >>$GITHUB_OUTPUT
            if [ "$enforce" = "true" ]; then
                echo "The version $version is not a semantic version, it should be a proper release tag and not based off a commit."
                exit 1
            fi
        fi
