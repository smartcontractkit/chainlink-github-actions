name: Solidity Review Artifacts
on:
  workflow_call:
    inputs:
      product:
        description: 'product for which to generate artifacts; should be the same as Foundry profile'
        type: string
        required: true
      commit_to_use:
        description: 'commit SHA to use for artifact generation; if empty HEAD will be used'
        type: string
        required: false
      base_ref:
        description: 'commit or tag to use as base reference, when looking for modified Solidity files; for a new repository use empty tree commit 4b825dc642cb6eb9a060e54bf8d69288fbee4904 to select all files'
        type: string
        required: true
      product_changes:
        description: 'true or false, indicates whether there were any changes in the product contracts, designed to work with dorny/paths-filter'
        type: string
        required: true
      product_files:
        description: 'comma-separated list of modified files in the product contracts, designed to work with dorny/paths-filter'
        type: string
        required: true
      changeset_changes:
        description: 'true or false, indicates whether there were any changes in the changeset files, designed to work with dorny/paths-filter. Set to false if your project does not use changesets'
        type: string
        required: true
      changeset_files:
        description: 'comma-separated list of modified files in the changeset folder, designed to work with dorny/paths-filter. Set to empty string if your project does not use changesets'
        type: string
        required: true
      foundry_version:
        description: 'foundry version to use'
        type: string
        required: true
      contracts_directory:
        description: 'root of directory, in which contracts and foundry.toml is located'
        default: '.'
        type: string
        required: false
      generate_code_coverage:
        description: 'true or false, indicating whether to generate code coverage report; default: true'
        type: string
        default: 'true'
        required: false
      generate_forge_book:
        description: 'true or false, indicating whether to generate documentation as Forge book; default: true'
        type: string
        default: 'true'
        required: false
      generate_uml_diagrams:
        description: 'true or false, indicating whether to generate UML diagrams; default: true'
        type: string
        default: 'true'
        required: false
      generate_slither_reports:
        description: 'true or false, indicating whether to generate Slither reports; default: true'
        type: string
        default: 'true'
        required: false
      default_solc_version:
        description: 'solc version to install and use as default. defaults to 0.8.24'
        type: string
        required: false
        default: '0.8.24'
      jira_host:
        description: 'Jira host'
        type: string
        required: true
      slither_config_file_path:
        description: 'path to the slither config file'
        type: string
        required: true
      install_semver:
        description: 'true or false, indicating whether to install semver'
        type: string
        required: false
        default: 'false'
    secrets:
      jira_username:
        required: true
      jira_api_token:
        required: true

env:
  FOUNDRY_PROFILE: ci
  # Unfortunately, we can't use the "default" field in the inputs section, because it does not have
  # access to the workflow context
  head_ref:  ${{ inputs.commit_to_use || github.sha }}
  artifacts_dir: review_artifacts

jobs:
  gather-basic-info:
    name: Gather basic info
    if: ${{ inputs.product_changes == 'true' }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          fetch-depth: 0

      - name: Create artifact directory
        shell: bash
        run: |
          mkdir -p ${{ env.artifacts_dir }}

      - name: Copy modified changesets
        if: ${{ inputs.changeset_changes == 'true' }}
        run: |
          mkdir -p ${{ env.artifacts_dir }}/changesets
          files="${{ inputs.changeset_files }}"
          IFS=","
          for changeset in $files; do
            echo "::debug:: Copying $changeset"
            cp $changeset ${{ env.artifacts_dir }}/changesets
          done

      - name: Generate basic info and modified contracts list
        shell: bash
        run: |
          echo "Product: ${{ inputs.product }}" > ${{ env.artifacts_dir }}/commit_sha_base_ref.txt
          echo "Commit SHA used to generate artifacts: ${{ env.head_ref }}" >> ${{ env.artifacts_dir }}/commit_sha_base_ref.txt
          echo "Base reference SHA used to find modified contracts: ${{ inputs.base_ref }}" >> ${{ env.artifacts_dir }}/commit_sha_base_ref.txt

          IFS=',' read -r -a modified_files <<< "${{ inputs.product_files }}"
          echo "# Modified contracts:" > ${{ env.artifacts_dir }}/modified_contracts.md
          for file in "${modified_files[@]}"; do
            echo " - [$file](${{ github.server_url }}/${{ github.repository }}/blob/${{ env.head_ref }}/$file)" >> ${{ env.artifacts_dir }}/modified_contracts.md
            echo "$file" >> ${{ env.artifacts_dir }}/modified_contracts.txt
          done

      - name: Upload basic info and modified contracts list
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        timeout-minutes: 2
        continue-on-error: true
        with:
          name: tmp-basic-info
          path: |
            ${{ env.artifacts_dir }}/modified_contracts.md
            ${{ env.artifacts_dir }}/modified_contracts.txt
            ${{ env.artifacts_dir }}/commit_sha_base_ref.txt
            ${{ env.artifacts_dir }}/changesets
          retention-days: 7

  # some of the artifacts can only be generated on product level, and we cannot scope them to single contracts
  # some product-level modifications might also require shared contracts changes, so if these happened we need to generate artifacts for shared contracts as well
  coverage-and-book:
    if: ${{ inputs.product_changes == 'true' && (inputs.generate_code_coverage == 'true' || inputs.generate_forge_book == 'true') }}
    name: Generate Docs and Code Coverage reports
    runs-on: ubuntu-22.04
    needs: [gather-basic-info]
    steps:
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          ref: ${{ env.head_ref }}

      - name: Setup NodeJS
        uses: smartcontractkit/chainlink-github-actions/solidity/setup-nodejs@e352dae76d1fa030250f85b5a8a1cb6ead863308
        with:
          contracts_dir: ${{ inputs.contracts_directory }}

      - name: Create code coverage directory
        if: ${{ inputs.generate_code_coverage == 'true' }}
        shell: bash
        working-directory: ${{ inputs.contracts_directory }}
        run: |
          mkdir -p code-coverage

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@8f1998e9878d786675189ef566a2e4bf24869773 # v1.2.0
        with:
          version: ${{ inputs.foundry_version }}

      # required for code coverage report generation
      - name: Setup LCOV
        if: ${{ inputs.generate_code_coverage == 'true' }}
        uses: hrishikesh-kadam/setup-lcov@f5da1b26b0dcf5d893077a3c4f29cf78079c841d # v1.0.0

      - name: Run Forge build for product contracts
        run: |
          forge --version
          forge build
        working-directory: ${{ inputs.contracts_directory }}
        env:
          FOUNDRY_PROFILE: ${{ inputs.product }}

      - name: Run coverage for product contracts
        if: ${{ inputs.generate_code_coverage == 'true' }}
        working-directory:  ${{ inputs.contracts_directory }}
        run: forge coverage --report lcov --report-file code-coverage/lcov.info
        env:
          FOUNDRY_PROFILE: ${{ inputs.product }}

      - name: Prune lcov report
        if: ${{ inputs.generate_code_coverage == 'true' }}
        shell: bash
        working-directory: ${{ inputs.contracts_directory }}
        run: |
          ./scripts/lcov_prune  ${{ inputs.product }} code-coverage/lcov.info code-coverage/lcov.info.pruned

      - name: Generate Code Coverage HTML report for product contracts
        if: ${{ inputs.generate_code_coverage == 'true' }}
        shell: bash
        working-directory: ${{ inputs.contracts_directory }}
        run: genhtml code-coverage/lcov.info.pruned --branch-coverage --output-directory code-coverage

      - name: Run Forge doc for product contracts
        if: ${{ inputs.generate_forge_book == 'true' }}
        run: forge doc --build -o forge_book
        working-directory: ${{ inputs.contracts_directory }}
        env:
          FOUNDRY_PROFILE: ${{ inputs.product }}

      - name: Upload Artifacts for product contracts
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        timeout-minutes: 2
        continue-on-error: true
        with:
          name: tmp-${{ inputs.product }}-artifacts
          path: |
            ${{ inputs.contracts_directory }}/forge_book
            ${{ inputs.contracts_directory }}/code-coverage/lcov-.info
            ${{ inputs.contracts_directory }}/code-coverage
          retention-days: 7

  # Generates UML diagrams and Slither reports for modified contracts
  uml-static-analysis:
    if: ${{ inputs.product_changes == 'true' && ( inputs.generate_uml_diagrams == 'true' || inputs.generate_slither_reports == 'true') }}
    name: Generate UML and Slither reports for modified contracts
    runs-on: ubuntu-22.04
    needs: [gather-basic-info]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          fetch-depth: 0
          ref: ${{ env.head_ref }}

      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          repository: smartcontractkit/chainlink-github-actions
          ref: e352dae76d1fa030250f85b5a8a1cb6ead863308
          path: ./reusable-workflow

      - name: Setup NodeJS
        uses: smartcontractkit/chainlink-github-actions/solidity/setup-nodejs@e352dae76d1fa030250f85b5a8a1cb6ead863308
        with:
          contracts_dir: ${{ inputs.contracts_directory }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@8f1998e9878d786675189ef566a2e4bf24869773 # v1.2.0
        with:
          version: ${{ inputs.foundry_version }}

      - name: Install Sol2uml
        if: ${{ inputs.generate_uml_diagrams == 'true' }}
        run: |
          pnpm add -g sol2uml

      - name: Set up Python
        if: ${{ inputs.generate_slither_reports == 'true' }}
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f #v5.1.1
        with:
          python-version: '3.8'

      - name: Install solc-select and solc
        if: ${{ inputs.generate_slither_reports == 'true' }}
        uses: smartcontractkit/chainlink-github-actions/solidity/setup-solc-select@e352dae76d1fa030250f85b5a8a1cb6ead863308
        with:
          to_install: ${{ inputs.default_solc_version }}
          to_use: ${{ inputs.default_solc_version }}

      - name: Install Slither
        if: ${{ inputs.generate_slither_reports == 'true' }}
        uses: smartcontractkit/chainlink-github-actions/solidity/setup-slither@e352dae76d1fa030250f85b5a8a1cb6ead863308

      - name: Install semver
        if: ${{ inputs.generate_slither_reports == 'true' && inputs.install_semver == 'true' }}
        run: |
          pnpm add -g semver

      - name: Generate UML
        if: ${{ inputs.generate_uml_diagrams == 'true' }}
        shell: bash
        run: |
          contract_list="${{ inputs.product_files }}"

          # modify remappings so that solc can find dependencies
          if [[ -n "${{ inputs.contracts_directory }}" && ("${{ inputs.contracts_directory }}" != "./" && "${{ inputs.contracts_directory }}" != ".") ]]; then
            echo "::debug::contracts directory isn't the root directory, but ${{ inputs.contracts_directory }}."
            echo "::debug::it's probable that remappings.txt is stored there. Copying it to root folder"
          
            ./reusable-workflow/solidity/scripts/modify_remappings.sh "${{ inputs.contracts_directory }}" "${{ inputs.contracts_directory }}/remappings.txt"          
            mv remappings_modified.txt remappings.txt
          fi

          ./reusable-workflow/solidity/scripts/generate_uml.sh "${{ inputs.contracts_directory }}" "${{ env.artifacts_dir }}/uml-diagrams" "$contract_list"

      - name: Generate Slither Markdown reports
        if: ${{ inputs.generate_slither_reports == 'true' }}
        run: |
          contract_list="${{ inputs.product_files }}"

          # without it Slither sometimes fails to use remappings correctly          
          if [[ -n "${{ inputs.contracts_directory }}" && ("${{ inputs.contracts_directory }}" != "./" && "${{ inputs.contracts_directory }}" != ".") ]]; then
            echo "::debug::contracts directory isn't the root directory, but in ${{ inputs.contracts_directory }}. Copying foundry.toml to root folder"          
            cp "${{ inputs.contracts_directory }}"/foundry.toml foundry.toml
          fi

          # solc-remaps might cause trouble here!
          echo "::debug::Processing contracts: $contract_list"
          ./reusable-workflow/solidity/scripts/generate_slither_report.sh "${{ github.server_url }}/${{ github.repository }}/blob/${{ env.head_ref }}/" "${{ inputs.slither_config_file_path }}" "${{ inputs.contracts_directory }}" "$contract_list" "${{ env.artifacts_dir }}/slither-reports" "--solc-remaps @=${{ inputs.contracts_directory }}/node_modules/@"

      - name: Upload UMLs and Slither reports
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        timeout-minutes: 10
        continue-on-error: true
        with:
          name: tmp-contracts-artifacts
          path: |
            ${{ env.artifacts_dir }}/uml-diagrams
            ${{ env.artifacts_dir }}/slither-reports
          retention-days: 7

      - name: Validate if all Slither run for all contracts
        uses: smartcontractkit/chainlink-github-actions/solidity/validate-solidity-artifacts@e352dae76d1fa030250f85b5a8a1cb6ead863308
        with:
          validate_slither_reports: ${{ inputs.generate_slither_reports }}
          validate_uml_diagrams: ${{ inputs.generate_uml_diagrams }}
          slither_reports_path: "${{ env.artifacts_dir }}/slither-reports"
          uml_diagrams_path: "${{ env.artifacts_dir }}/uml-diagrams"
          sol_files: ${{ inputs.product_files }}

  gather-all-artifacts:
    name: Gather all artifacts
    if: ${{ always() && inputs.product_changes == 'true' }}
    runs-on: ubuntu-latest
    needs: [coverage-and-book, uml-static-analysis, gather-basic-info]
    steps:
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          ref: ${{ env.head_ref }}

      - name: Download all artifacts
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          path: review_artifacts
          merge-multiple: true

      - name: Upload all artifacts as single package
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: review-artifacts-${{ inputs.product }}-${{ inputs.base_ref }}-${{ env.head_ref }}
          path: review_artifacts

      - name: Remove temporary artifacts
        uses: geekyeggo/delete-artifact@24928e75e6e6590170563b8ddae9fac674508aa1 # v5.0
        with:
          name: tmp-*

      - name: Print Artifact URL in job summary
        id: gather-all-artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ARTIFACTS=$(gh api -X GET repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)
          ARTIFACT_ID=$(echo "$ARTIFACTS" | jq '.artifacts[] | select(.name=="review-artifacts-${{ inputs.product }}-${{ inputs.base_ref }}-${{ env.head_ref }}") | .id')
          echo "Artifact ID: $ARTIFACT_ID"

          echo "# Solidity Review Artifact Generated" >> $GITHUB_STEP_SUMMARY
          echo "Product: **${{ inputs.product }}**" >> $GITHUB_STEP_SUMMARY
          echo "Base Ref used: **${{ inputs.base_ref }}**" >> $GITHUB_STEP_SUMMARY
          echo "Commit SHA used: **${{ env.head_ref }}**" >> $GITHUB_STEP_SUMMARY

          artifact_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/$ARTIFACT_ID"
          echo "[Artifact URL]($artifact_url)" >> $GITHUB_STEP_SUMMARY
          echo "artifact-url=$artifact_url" >> $GITHUB_OUTPUT

      - name: Setup NodeJS
        uses: smartcontractkit/chainlink-github-actions/solidity/setup-nodejs@e352dae76d1fa030250f85b5a8a1cb6ead863308
        with:
          contracts_dir: ${{ inputs.contracts_directory }}

      - name: Checkout this repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          repository: smartcontractkit/chainlink-github-actions
          ref: d4f881b42765927f0b979e9c2a480f9a726441fc
          path: ./reusable-workflow

      - name: Setup git top level directory
        id: find-git-top-level-dir
        run: echo "top_level_dir=$(pwd)" >> $GITHUB_OUTPUT

      - name: Setup Jira
        run: pnpm --prefix=./reusable-workflow/jira i

      - name: Create Traceability
        run: |
          pnpm --prefix=./reusable-workflow/jira issue:traceability
        env:
          CHANGESET_FILES: ${{ inputs.changeset_files }}
          CHAINLINK_PRODUCT: ${{ inputs.product }}
          BASE_REF: ${{ inputs.base_ref }}
          HEAD_REF: ${{ env.head_ref }}
          ARTIFACT_URL: ${{ steps.gather-all-artifacts.outputs.artifact-url }}
          GIT_TOP_LEVEL_DIR: ${{ steps.find-git-top-level-dir.outputs.top_level_dir }}

          JIRA_HOST: ${{ inputs.jira_host }}
          JIRA_USERNAME: ${{ secrets.jira_username }}
          JIRA_API_TOKEN: ${{ secrets.jira_api_token }}

          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-no-changes:
    if: ${{ inputs.product_changes == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Print warning in job summary
        shell: bash
        run: |
          echo "# Solidity Review Artifact NOT Generated" >> $GITHUB_STEP_SUMMARY
          echo "Base Ref used: **${{ inputs.base_ref }}**" >> $GITHUB_STEP_SUMMARY
          echo "Commit SHA used: **${{ env.head_ref }}**" >> $GITHUB_STEP_SUMMARY
          echo "## Reason: No modified Solidity files found for ${{ inputs.product }}" >> $GITHUB_STEP_SUMMARY
          echo "* no modified Solidity files found between ${{ inputs.base_ref }} and ${{ env.head_ref }} commits" >> $GITHUB_STEP_SUMMARY
          echo "* or they are located outside of search path" >> $GITHUB_STEP_SUMMARY
          echo "* or they were limited to test files" >> $GITHUB_STEP_SUMMARY
          exit 1
